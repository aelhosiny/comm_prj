-- -------------------------------------------------------------
--
-- Module: decimation
-- Generated by MATLAB(R) 8.1 and the Filter Design HDL Coder 2.9.3.
-- Generated on: 2015-03-15 23:07:28
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- ClockEnableInputPort: enable
-- ResetInputPort: rstn
-- Name: decimation
-- ResetAssertedLevel: Active-low
-- TestBenchStimulus: step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure        : Cascaded Integrator-Comb Decimator
-- Decimation Factor       : 16
-- Differential Delay      : 1
-- Number of Sections      : 2
-- Stable                  : Yes
-- Linear Phase            : Yes (Type 1)
--
-- Input                   : s6,5
-- Output                  : s14,5
-- Filter Internals        : Minimum Word Lengths
--   Integrator Section 1  : s14,5
--   Integrator Section 2  : s14,5
--   Comb Section 1        : s14,5
--   Comb Section 2        : s14,5
-- -------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decimation is
  port(clk        : in  std_logic;
       enable     : in  std_logic;
       rstn       : in  std_logic;
       dec_ratio  : in  std_logic_vector(1 downto 0);
       filter_in  : in  std_logic_vector(5 downto 0);  -- sfix6_En5
       filter_out : out std_logic_vector(9 downto 0);  -- sfix10_En8
       ce_out     : out std_logic
       );

end decimation;


----------------------------------------------------------------
--Module Architecture: decimation
----------------------------------------------------------------
architecture rtl of decimation is
  -- Local Functions
  -- Type Definitions
  -- Constants
  -- Signals
  signal cur_count          : unsigned(3 downto 0);  -- ufix4
  signal phase_1            : std_logic;             -- boolean
  signal ce_out_reg         : std_logic;             -- boolean
  --   
  signal input_register     : signed(5 downto 0);    -- sfix6_En5
  --   -- Section 1 Signals 
  signal section_in1        : signed(5 downto 0);    -- sfix6_En5
  signal section_cast1      : signed(13 downto 0);   -- sfix14_En5
  signal sum1               : signed(13 downto 0);   -- sfix14_En5
  signal section_out1       : signed(13 downto 0);   -- sfix14_En5
  signal add_cast           : signed(13 downto 0);   -- sfix14_En5
  signal add_cast_1         : signed(13 downto 0);   -- sfix14_En5
  signal add_temp           : signed(14 downto 0);   -- sfix15_En5
  --   -- Section 2 Signals 
  signal section_in2        : signed(13 downto 0);   -- sfix14_En5
  signal sum2               : signed(13 downto 0);   -- sfix14_En5
  signal section_out2       : signed(13 downto 0);   -- sfix14_En5
  signal add_cast_2         : signed(13 downto 0);   -- sfix14_En5
  signal add_cast_3         : signed(13 downto 0);   -- sfix14_En5
  signal add_temp_1         : signed(14 downto 0);   -- sfix15_En5
  --   -- Section 3 Signals 
  signal section_in3        : signed(13 downto 0);   -- sfix14_En5
  signal diff1              : signed(13 downto 0);   -- sfix14_En5
  signal section_out3       : signed(13 downto 0);   -- sfix14_En5
  signal sub_cast           : signed(13 downto 0);   -- sfix14_En5
  signal sub_cast_1         : signed(13 downto 0);   -- sfix14_En5
  signal sub_temp           : signed(14 downto 0);   -- sfix15_En5
  --   -- Section 4 Signals 
  signal section_in4        : signed(13 downto 0);   -- sfix14_En5
  signal diff2              : signed(13 downto 0);   -- sfix14_En5
  signal section_out4       : signed(13 downto 0);   -- sfix14_En5
  signal sub_cast_2         : signed(13 downto 0);   -- sfix14_En5
  signal sub_cast_3         : signed(13 downto 0);   -- sfix14_En5
  signal sub_temp_1         : signed(14 downto 0);   -- sfix15_En5
  --
  signal output_register_nx : signed(9 downto 0);    -- sfix10_En8
  signal output_register_s  : signed(9 downto 0);    -- sfix10_En8
  signal dec_ratio_s        : unsigned(3 downto 0);

begin

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  with dec_ratio select
    dec_ratio_s <=
    to_unsigned(15, 4) when "10",
    to_unsigned(7, 4)  when "01",
    to_unsigned(3, 4)  when "00",
    (others => 'X')    when others;
  
  ce_output : process (clk, rstn)
  begin
    if rstn = '0' then
      cur_count <= to_unsigned(0, 4);
    elsif clk'event and clk = '1' then
      if enable = '1' then
        if cur_count = dec_ratio_s then
          cur_count <= to_unsigned(0, 4);
        else
          cur_count <= cur_count + 1;
        end if;
      end if;
    end if;
  end process ce_output;

  phase_1 <= '1' when cur_count = to_unsigned(1, 4) and enable = '1' else '0';

  --   ------------------ CE Output Register ------------------

  ce_output_register : process (clk, rstn)
  begin
    if rstn = '0' then
      ce_out_reg <= '0';
    elsif clk'event and clk = '1' then
      ce_out_reg <= phase_1;
      
    end if;
  end process ce_output_register;

  --   ------------------ Input Register ------------------

  input_reg_process : process (clk, rstn)
  begin
    if rstn = '0' then
      input_register <= (others => '0');
    elsif clk'event and clk = '1' then
      if enable = '1' then
        input_register <= signed(filter_in);
      end if;
    end if;
  end process input_reg_process;

  --   ------------------ Section # 1 : Integrator ------------------

  section_in1 <= input_register;

  section_cast1 <= resize(section_in1, 14);

  add_cast   <= section_cast1;
  add_cast_1 <= section_out1;
  add_temp   <= resize(add_cast, 15) + resize(add_cast_1, 15);
  sum1       <= add_temp(13 downto 0);

  integrator_delay_section1 : process (clk, rstn)
  begin
    if rstn = '0' then
      section_out1 <= (others => '0');
    elsif clk'event and clk = '1' then
      if enable = '1' then
        section_out1 <= sum1;
      end if;
    end if;
  end process integrator_delay_section1;

  --   ------------------ Section # 2 : Integrator ------------------

  section_in2 <= section_out1;

  add_cast_2 <= section_in2;
  add_cast_3 <= section_out2;
  add_temp_1 <= resize(add_cast_2, 15) + resize(add_cast_3, 15);
  sum2       <= add_temp_1(13 downto 0);

  integrator_delay_section2 : process (clk, rstn)
  begin
    if rstn = '0' then
      section_out2 <= (others => '0');
    elsif clk'event and clk = '1' then
      if enable = '1' then
        section_out2 <= sum2;
      end if;
    end if;
  end process integrator_delay_section2;

  --   ------------------ Section # 3 : Comb ------------------

  section_in3 <= section_out2;

  sub_cast     <= section_in3;
  sub_cast_1   <= diff1;
  sub_temp     <= resize(sub_cast, 15) - resize(sub_cast_1, 15);
  section_out3 <= sub_temp(13 downto 0);

  comb_delay_section3 : process (clk, rstn)
  begin
    if rstn = '0' then
      diff1 <= (others => '0');
    elsif clk'event and clk = '1' then
      if phase_1 = '1' then
        diff1 <= section_in3;
      end if;
    end if;
  end process comb_delay_section3;

  --   ------------------ Section # 4 : Comb ------------------

  section_in4 <= section_out3;

  sub_cast_2   <= section_in4;
  sub_cast_3   <= diff2;
  sub_temp_1   <= resize(sub_cast_2, 15) - resize(sub_cast_3, 15);
  section_out4 <= sub_temp_1(13 downto 0);

  comb_delay_section4 : process (clk, rstn)
  begin
    if rstn = '0' then
      diff2 <= (others => '0');
    elsif clk'event and clk = '1' then
      if phase_1 = '1' then
        diff2 <= section_in4;
      end if;
    end if;
  end process comb_delay_section4;

  --   ------------------ Output Register ------------------
  with dec_ratio select
    output_register_nx <=
    section_out4(13) & section_out4(8) & section_out4(7 downto 0)   when "00",
    section_out4(13) & section_out4(10) & section_out4(9 downto 2)  when "01",
    section_out4(13) & section_out4(12) & section_out4(11 downto 4) when "10",
    (others => 'X')                                                 when others;

  
  output_reg_process : process (clk, rstn)
  begin
    if rstn = '0' then
      output_register_s <= (others => '0');
    elsif clk'event and clk = '1' then
      if phase_1 = '1' then
        output_register_s <= output_register_nx;
      end if;
    end if;
  end process output_reg_process;

  -- Assignment Statements
  ce_out     <= ce_out_reg;
  filter_out <= std_logic_vector(output_register_s);
end rtl;
