-- -------------------------------------------------------------
--
-- Module: decimator
-- Generated by MATLAB(R) 8.1 and the Filter Design HDL Coder 2.9.3.
-- Generated on: 2015-03-28 14:50:07
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ResetInputPort: rstn
-- Name: decimator
-- ResetAssertedLevel: Active-low
-- TestBenchStimulus: step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure        : Cascaded Integrator-Comb Decimator
-- Decimation Factor       : 16
-- Differential Delay      : 2
-- Number of Sections      : 3
-- Stable                  : Yes
-- Linear Phase            : Yes (Type 2)
--
-- Input                   : s6,5
-- Output                  : s31,15
-- Filter Internals        : Minimum Word Lengths
--   Integrator Section 1  : s21,5
--   Integrator Section 2  : s21,5
--   Integrator Section 3  : s21,5
--   Comb Section 1        : s21,5
--   Comb Section 2        : s21,5
--   Comb Section 3        : s21,5
-- -------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decimator is
  port(clk        : in  std_logic;
       clk_enable : in  std_logic;
       rstn       : in  std_logic;
       filter_in  : in  std_logic_vector(5 downto 0);   -- sfix6_En5
       filter_out : out std_logic_vector(15 downto 0);  -- sfix16_En0
       ce_out     : out std_logic
       );

end decimator;


----------------------------------------------------------------
--Module Architecture: decimator
----------------------------------------------------------------
architecture rtl of decimator is
  -- Local Functions
  -- Type Definitions
  type   vector_of_signed21 is array (natural range <>) of signed(20 downto 0);
  -- Constants
  -- Signals
  signal cur_count          : unsigned(3 downto 0);        -- ufix4
  signal phase_1            : std_logic;                   -- boolean
  signal ce_out_reg         : std_logic;                   -- boolean
  --   
  signal input_register     : signed(5 downto 0);          -- sfix6_En5
  --   -- Section 1 Signals 
  signal section_in1        : signed(5 downto 0);          -- sfix6_En5
  signal section_cast1      : signed(20 downto 0);         -- sfix21_En5
  signal sum1               : signed(20 downto 0);         -- sfix21_En5
  signal section_out1       : signed(20 downto 0);         -- sfix21_En5
  signal add_cast           : signed(20 downto 0);         -- sfix21_En5
  signal add_cast_1         : signed(20 downto 0);         -- sfix21_En5
  signal add_temp           : signed(21 downto 0);         -- sfix22_En5
  --   -- Section 2 Signals 
  signal section_in2        : signed(20 downto 0);         -- sfix21_En5
  signal sum2               : signed(20 downto 0);         -- sfix21_En5
  signal section_out2       : signed(20 downto 0);         -- sfix21_En5
  signal add_cast_2         : signed(20 downto 0);         -- sfix21_En5
  signal add_cast_3         : signed(20 downto 0);         -- sfix21_En5
  signal add_temp_1         : signed(21 downto 0);         -- sfix22_En5
  --   -- Section 3 Signals 
  signal section_in3        : signed(20 downto 0);         -- sfix21_En5
  signal sum3               : signed(20 downto 0);         -- sfix21_En5
  signal section_out3       : signed(20 downto 0);         -- sfix21_En5
  signal add_cast_4         : signed(20 downto 0);         -- sfix21_En5
  signal add_cast_5         : signed(20 downto 0);         -- sfix21_En5
  signal add_temp_2         : signed(21 downto 0);         -- sfix22_En5
  --   -- Section 4 Signals 
  signal section_in4        : signed(20 downto 0);         -- sfix21_En5
  signal diff1              : signed(20 downto 0);         -- sfix21_En5
  signal section_out4       : signed(20 downto 0);         -- sfix21_En5
  signal sub_cast           : signed(20 downto 0);         -- sfix21_En5
  signal sub_cast_1         : signed(20 downto 0);         -- sfix21_En5
  signal sub_temp           : signed(21 downto 0);         -- sfix22_En5
  signal int_delay_pipe     : vector_of_signed21(0 to 1);  -- sfix21_En5
  --   -- Section 5 Signals 
  signal section_in5        : signed(20 downto 0);         -- sfix21_En5
  signal diff2              : signed(20 downto 0);         -- sfix21_En5
  signal section_out5       : signed(20 downto 0);         -- sfix21_En5
  signal sub_cast_2         : signed(20 downto 0);         -- sfix21_En5
  signal sub_cast_3         : signed(20 downto 0);         -- sfix21_En5
  signal sub_temp_1         : signed(21 downto 0);         -- sfix22_En5
  signal int_delay_pipe_1   : vector_of_signed21(0 to 1);  -- sfix21_En5
  --   -- Section 6 Signals 
  signal section_in6        : signed(20 downto 0);         -- sfix21_En5
  signal diff3              : signed(20 downto 0);         -- sfix21_En5
  signal section_out6       : signed(20 downto 0);         -- sfix21_En5
  signal sub_cast_4         : signed(20 downto 0);         -- sfix21_En5
  signal sub_cast_5         : signed(20 downto 0);         -- sfix21_En5
  signal sub_temp_2         : signed(21 downto 0);         -- sfix22_En5
  signal int_delay_pipe_2   : vector_of_signed21(0 to 1);  -- sfix21_En5
  signal output_typeconvert : signed(30 downto 0);         -- sfix31_En15
  --   
  signal output_register    : signed(15 downto 0);         -- sfix31_En15


begin

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : process (clk, rstn)
  begin
    if rstn = '0' then
      cur_count <= to_unsigned(0, 4);
    elsif clk'event and clk = '1' then
      if clk_enable = '1' then
        if cur_count = to_unsigned(15, 4) then
          cur_count <= to_unsigned(0, 4);
        else
          cur_count <= cur_count + 1;
        end if;
      end if;
    end if;
  end process ce_output;

  phase_1 <= '1' when cur_count = to_unsigned(1, 4) and clk_enable = '1' else '0';

  --   ------------------ CE Output Register ------------------

  ce_output_register : process (clk, rstn)
  begin
    if rstn = '0' then
      ce_out_reg <= '0';
    elsif clk'event and clk = '1' then
      ce_out_reg <= phase_1;
      
    end if;
  end process ce_output_register;

  --   ------------------ Input Register ------------------

  input_reg_process : process (clk, rstn)
  begin
    if rstn = '0' then
      input_register <= (others => '0');
    elsif clk'event and clk = '1' then
      if clk_enable = '1' then
        input_register <= signed(filter_in);
      end if;
    end if;
  end process input_reg_process;

  --   ------------------ Section # 1 : Integrator ------------------

  section_in1 <= input_register;

  section_cast1 <= resize(section_in1, 21);

  add_cast   <= section_cast1;
  add_cast_1 <= section_out1;
  add_temp   <= resize(add_cast, 22) + resize(add_cast_1, 22);
  sum1       <= add_temp(20 downto 0);

  integrator_delay_section1 : process (clk, rstn)
  begin
    if rstn = '0' then
      section_out1 <= (others => '0');
    elsif clk'event and clk = '1' then
      if clk_enable = '1' then
        section_out1 <= sum1;
      end if;
    end if;
  end process integrator_delay_section1;

  --   ------------------ Section # 2 : Integrator ------------------

  section_in2 <= section_out1;

  add_cast_2 <= section_in2;
  add_cast_3 <= section_out2;
  add_temp_1 <= resize(add_cast_2, 22) + resize(add_cast_3, 22);
  sum2       <= add_temp_1(20 downto 0);

  integrator_delay_section2 : process (clk, rstn)
  begin
    if rstn = '0' then
      section_out2 <= (others => '0');
    elsif clk'event and clk = '1' then
      if clk_enable = '1' then
        section_out2 <= sum2;
      end if;
    end if;
  end process integrator_delay_section2;

  --   ------------------ Section # 3 : Integrator ------------------

  section_in3 <= section_out2;

  add_cast_4 <= section_in3;
  add_cast_5 <= section_out3;
  add_temp_2 <= resize(add_cast_4, 22) + resize(add_cast_5, 22);
  sum3       <= add_temp_2(20 downto 0);

  integrator_delay_section3 : process (clk, rstn)
  begin
    if rstn = '0' then
      section_out3 <= (others => '0');
    elsif clk'event and clk = '1' then
      if clk_enable = '1' then
        section_out3 <= sum3;
      end if;
    end if;
  end process integrator_delay_section3;

  --   ------------------ Section # 4 : Comb ------------------

  section_in4 <= section_out3;

  sub_cast     <= section_in4;
  sub_cast_1   <= diff1;
  sub_temp     <= resize(sub_cast, 22) - resize(sub_cast_1, 22);
  section_out4 <= sub_temp(20 downto 0);

  comb_delay_section4 : process (clk, rstn)
  begin
    if rstn = '0' then
      int_delay_pipe <= (others => (others => '0'));
    elsif clk'event and clk = '1' then
      if phase_1 = '1' then
        int_delay_pipe(1) <= int_delay_pipe(0);
        int_delay_pipe(0) <= section_in4;
      end if;
    end if;
  end process comb_delay_section4;
  diff1 <= int_delay_pipe(1);

  --   ------------------ Section # 5 : Comb ------------------

  section_in5 <= section_out4;

  sub_cast_2   <= section_in5;
  sub_cast_3   <= diff2;
  sub_temp_1   <= resize(sub_cast_2, 22) - resize(sub_cast_3, 22);
  section_out5 <= sub_temp_1(20 downto 0);

  comb_delay_section5 : process (clk, rstn)
  begin
    if rstn = '0' then
      int_delay_pipe_1 <= (others => (others => '0'));
    elsif clk'event and clk = '1' then
      if phase_1 = '1' then
        int_delay_pipe_1(1) <= int_delay_pipe_1(0);
        int_delay_pipe_1(0) <= section_in5;
      end if;
    end if;
  end process comb_delay_section5;
  diff2 <= int_delay_pipe_1(1);

  --   ------------------ Section # 6 : Comb ------------------

  section_in6 <= section_out5;

  sub_cast_4   <= section_in6;
  sub_cast_5   <= diff3;
  sub_temp_2   <= resize(sub_cast_4, 22) - resize(sub_cast_5, 22);
  section_out6 <= sub_temp_2(20 downto 0);

  comb_delay_section6 : process (clk, rstn)
  begin
    if rstn = '0' then
      int_delay_pipe_2 <= (others => (others => '0'));
    elsif clk'event and clk = '1' then
      if phase_1 = '1' then
        int_delay_pipe_2(1) <= int_delay_pipe_2(0);
        int_delay_pipe_2(0) <= section_in6;
      end if;
    end if;
  end process comb_delay_section6;
  diff3 <= int_delay_pipe_2(1);

  output_typeconvert <= resize(section_out6(20 downto 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31);

  --   ------------------ Output Register ------------------

  output_reg_process : process (clk, rstn)
  begin
    if rstn = '0' then
      output_register <= (others => '0');
    elsif clk'event and clk = '1' then
      if phase_1 = '1' then
        output_register <= output_typeconvert(output_typeconvert'length-1 downto 15);
      end if;
    end if;
  end process output_reg_process;

  -- Assignment Statements
  ce_out     <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
end rtl;
