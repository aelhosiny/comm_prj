// -------------------------------------------------------------
// 
// File Name: hdlsrc/cic_test_mdl/loop_filter.v
// Created: 2015-07-27 23:36:40
// 
// Generated by MATLAB 8.1 and HDL Coder 3.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.6e-09
// Target subsystem base rate: 2.56e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ceout         2.56e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// filter_out                    ceout         2.56e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: loop_filter
// Source Path: cic_test_mdl/loop_filter
// Hierarchy Level: 0
// 
// -------------------------------------------------------------



module loop_filter
          (
           clk,
           rstn,
           enable,
           filter_in,
           ceout,
           filter_out,a2,a3,b1,b2
          );


  input   clk;
  input   rstn;
  input   enable;
  input   signed [20:0] filter_in;  // sfix21_En20
  output  ceout;
  output  signed [20:0] filter_out;  // sfix21_En20
  input signed [15:0] a3,a2,b1,b2;


  wire enb_1_16_0;
  wire signed [36:0] b_1_out1;  // sfix37_En33
  wire signed [36:0] b_2_out1;  // sfix37_En33
  wire signed [20:0] CastCAS_out1;  // sfix21_En20
  wire signed [36:0] a_2_out1;  // sfix37_En34
  wire signed [36:0] a_3_out1;  // sfix37_En34
  wire signed [15:0] CastStates3_out1;  // sfix16_En10
  reg signed [15:0] BodyDelay3_out1;  // sfix16_En10
  wire signed [39:0] BodyLSum2_sub_cast;  // sfix40_En34
  wire signed [40:0] BodyLSum2_sub_cast_1;  // sfix41_En34
  wire signed [39:0] BodyLSum2_sub_cast_2;  // sfix40_En34
  wire signed [40:0] BodyLSum2_sub_cast_3;  // sfix41_En34
  wire signed [40:0] BodyLSum2_sub_temp;  // sfix41_En34
  wire signed [39:0] BodyLSum2_out1;  // sfix40_En34
  wire signed [40:0] BodyRSum2_sub_cast;  // sfix41_En34
  wire signed [39:0] BodyRSum2_sub_cast_1;  // sfix40_En34
  wire signed [40:0] BodyRSum2_sub_cast_2;  // sfix41_En34
  wire signed [40:0] BodyRSum2_sub_temp;  // sfix41_En34
  wire signed [39:0] BodyRSum2_out1;  // sfix40_En34
  wire signed [15:0] CastStates2_out1;  // sfix16_En10
  reg signed [15:0] BodyDelay2_out1;  // sfix16_En10
  wire signed [39:0] HeadSum1_add_cast;  // sfix40_En34
  wire signed [40:0] HeadSum1_add_cast_1;  // sfix41_En34
  wire signed [39:0] HeadSum1_add_cast_2;  // sfix40_En34
  wire signed [40:0] HeadSum1_add_cast_3;  // sfix41_En34
  wire signed [40:0] HeadSum1_add_temp;  // sfix41_En34
  wire signed [39:0] HeadSum1_out1;  // sfix40_En34


  assign b_1_out1 = b1 * filter_in;



  assign b_2_out1 = b2 * filter_in;



  assign enb_1_16_0 = enable;

  assign a_2_out1 = a2 * CastCAS_out1;



  assign a_3_out1 = a3 * CastCAS_out1;



  assign CastStates3_out1 = {{3{a_3_out1[36]}}, a_3_out1[36:24]};



  always @(posedge clk or negedge rstn)
    begin : BodyDelay3_process
      if (rstn == 1'b0) begin
        BodyDelay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_16_0) begin
          BodyDelay3_out1 <= CastStates3_out1;
        end
      end
    end



  assign BodyLSum2_sub_cast = {{2{b_2_out1[36]}}, {b_2_out1, 1'b0}};
  assign BodyLSum2_sub_cast_1 = BodyLSum2_sub_cast;
  assign BodyLSum2_sub_cast_2 = {BodyDelay3_out1, 24'b000000000000000000000000};
  assign BodyLSum2_sub_cast_3 = BodyLSum2_sub_cast_2;
  assign BodyLSum2_sub_temp = BodyLSum2_sub_cast_1 - BodyLSum2_sub_cast_3;
  assign BodyLSum2_out1 = ((BodyLSum2_sub_temp[40] == 1'b0) && (BodyLSum2_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((BodyLSum2_sub_temp[40] == 1'b1) && (BodyLSum2_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(BodyLSum2_sub_temp[39:0])));



  assign BodyRSum2_sub_cast = BodyLSum2_out1;
  assign BodyRSum2_sub_cast_1 = a_2_out1;
  assign BodyRSum2_sub_cast_2 = BodyRSum2_sub_cast_1;
  assign BodyRSum2_sub_temp = BodyRSum2_sub_cast - BodyRSum2_sub_cast_2;
  assign BodyRSum2_out1 = ((BodyRSum2_sub_temp[40] == 1'b0) && (BodyRSum2_sub_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((BodyRSum2_sub_temp[40] == 1'b1) && (BodyRSum2_sub_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(BodyRSum2_sub_temp[39:0])));



  assign CastStates2_out1 = ((BodyRSum2_out1[39] == 1'b0) && (BodyRSum2_out1[38:24] == 15'b111111111111111) ? 16'sb0111111111111111 :
              $signed(BodyRSum2_out1[39:24]));



  always @(posedge clk or negedge rstn)
    begin : BodyDelay2_process
      if (rstn == 1'b0) begin
        BodyDelay2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_16_0) begin
          BodyDelay2_out1 <= CastStates2_out1;
        end
      end
    end



  assign HeadSum1_add_cast = {{2{b_1_out1[36]}}, {b_1_out1, 1'b0}};
  assign HeadSum1_add_cast_1 = HeadSum1_add_cast;
  assign HeadSum1_add_cast_2 = {BodyDelay2_out1, 24'b000000000000000000000000};
  assign HeadSum1_add_cast_3 = HeadSum1_add_cast_2;
  assign HeadSum1_add_temp = HeadSum1_add_cast_1 + HeadSum1_add_cast_3;
  assign HeadSum1_out1 = ((HeadSum1_add_temp[40] == 1'b0) && (HeadSum1_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((HeadSum1_add_temp[40] == 1'b1) && (HeadSum1_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(HeadSum1_add_temp[39:0])));



  assign CastCAS_out1 = ((HeadSum1_out1[39] == 1'b0) && (HeadSum1_out1[38:34] != 5'b00000) ? 21'sb011111111111111111111 :
              ((HeadSum1_out1[39] == 1'b1) && (HeadSum1_out1[38:34] != 5'b11111) ? 21'sb100000000000000000000 :
              $signed(HeadSum1_out1[34:14])));



  assign filter_out = CastCAS_out1;

  assign ceout = enable;

endmodule  // loop_filter

